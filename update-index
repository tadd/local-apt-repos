#!/bin/bash -eu

declare verbose=
log() {
    if [[ $verbose ]]; then
        msg "$@"
    fi
}

msg() {
    echo "$progname: $@" >&2
}

check() {
    log 'Check the need to genrerate indexes'
    for deb in *.deb; do
        if [[ Packages -ot $deb ]]; then
            log 'Check done, will generate'
            return
        fi
    done
    log 'Check done. No need to genrerate, exiting'
    exit
}

generate_index() {
    log 'Generating local indexes'
    apt-ftparchive packages . > Packages
    apt-ftparchive release . > Release
    log 'Generating done'
}

gh_latest_version() {
    base="$1"
    wget --spider -qS $base 2>&1|sed -r 's|  Location: .*/v?([^/]+)$|\1|p;d'
}

ghurl() {
    repos="$1"
    fmt="$2"

    base="https://github.com/${repos}/releases/latest/download"
    ver=$(gh_latest_version $base)
    printf "${base}/${fmt}\n" $ver
}

url_from_redirect() {
    wget --spider -qS "$1" 2>&1|sed -n 's/ *location: *//p'
}

bat() {
    ghurl sharkdp/bat 'bat_%s_amd64.deb'
}

delta() {
    ghurl dandavison/delta 'git-delta_%s_amd64.deb'
}

zoom() {
    echo 'https://zoom.us/client/latest/zoom_amd64.deb'
}

discord() {
    url_from_redirect 'https://discord.com/api/download?platform=linux&format=deb'
}

parseopts() {
    local -A lopts
    for arg in "$@"; do
        if [[ ${arg} =~ ^-- ]]; then
            lopts[${arg/--/}]=t
        fi
    done
    declare -p lopts | sed 's/.*lopts=//'
}

update_index() {
    local -a pkgs=(bat zoom delta discord)
    local -A opts=$(parseopts "$@")

    if [[ ${opts[verbose]-} ]]; then
        verbose=t
    fi

    log 'wget(1)ing all pacakges with timestamp checking'
    for pkg in ${pkgs[@]}; do
        wget -qN "$($pkg)" &
    done

    wait

    if [[ ${opts[force]-} ]]; then
        msg 'Forcing to generate files without checking'
    else
        check # may exit
    fi
    generate_index
}

declare progname
main() {
    local me="$(readlink -f $0)"
    progname=$(basename "$me")
    cd $(dirname "$me")
    update_index "$@"
}

main "$@"
